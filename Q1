#include<iostream>
#include<cmath>
using namespace std;
class Fraction
{
    int numerator;
    int denominator;
    public:
    Fraction(int n,int d):numerator(n),denominator(d){
        if(denominator == 0){
            cout<<"Incorrect Input denominator cannot be zero"<<endl;
            numerator = 0;
            denominator = 1;
        } else {
            if(denominator < 0){
                numerator = -numerator;
                denominator = -denominator;
            }
            reduce();
        }
    }
    int GCD(int a ,int b){
        while(b!=0){
            int temp=b;
            b = a % b;
            a = temp;
        }
        return a;
    }
    void reduce(){
        int gcd=GCD(abs(numerator),abs(denominator));
        numerator/=gcd;
        denominator/=gcd;
    }
    Fraction operator+(const Fraction &other) const {
        return Fraction(numerator * other.denominator + other.numerator * denominator,
        denominator * other.denominator);
    }
    Fraction operator-(const Fraction &other) const {
        return Fraction(numerator * other.denominator - other.numerator * denominator,
        denominator * other.denominator);
    }
    Fraction operator*(const Fraction &other) const {
        return Fraction(numerator * other.numerator, denominator * other.denominator);
    }
    Fraction operator/(const Fraction &other) const {
        return Fraction(numerator * other.denominator, denominator * other.numerator);
    }
    bool operator==(const Fraction &other) const {
        return numerator == other.numerator && denominator == other.denominator;
    }
    bool operator!=(const Fraction &other) const {
        return !(*this == other);
    }
    bool operator<(const Fraction &other) const {
        return numerator * other.denominator < other.numerator * denominator;
    }
    bool operator>(const Fraction &other) const {
        return numerator * other.denominator > other.numerator * denominator;
    }
    bool operator<=(const Fraction &other) const {
        return numerator * other.denominator <= other.numerator * denominator;
    }
    bool operator>=(const Fraction &other) const {
        return numerator * other.denominator >= other.numerator * denominator;
    }
    friend ostream& operator<<(ostream &out, const Fraction &f);
    friend istream& operator>>(istream &in, Fraction &f);
}; 
ostream& operator<<(ostream &out, const Fraction &f){
    out << f.numerator << "/" << f.denominator;
    return out;
}
istream& operator>>(istream &in, Fraction &f){
    in >> f.numerator >> f.denominator;
    if(f.denominator < 0){
        f.numerator = -f.numerator;
        f.denominator = -f.denominator;
    }
    f.reduce();
    return in;
}
int main(){
    Fraction f1(2,4), f2(3,6);
    cout << (f1 + f2) << endl;
}
